generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id          Int          @id @default(autoincrement())
    username    String       @unique
    email       String?      @unique
    password    String?
    phone       String?      @unique
    github_id   String?      @unique
    avatar      String?
    cover_photo String?
    created_at  DateTime     @default(now())
    updated_at  DateTime     @updatedAt
    tokens      SMSToken[]
    products    Product[]
    posts       Post[]
    comments    Comment[]
    likes       Like[]
    chat_rooms  ChatRoom[]
    messages    Message[]
    LiveStream  LiveStream[]
    Cart        Cart[]
}

model SMSToken {
    id         Int      @id @default(autoincrement())
    token      String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
}

model Product {
    id          Int      @id @default(autoincrement())
    title       String
    price       Float
    description String
    photo       String
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int

    Cart     Cart?      @relation(fields: [cartId], references: [id])
    cartId   Int?
    CartItem CartItem[]
}

model Post {
    id          Int    @id @default(autoincrement())
    title       String
    description String
    views       Int    @default(0)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   Int
    comments Comment[]
    likes    Like[]
}

model Comment {
    id      Int    @id @default(autoincrement())
    payload String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId Int
}

model Like {
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId Int
    postId Int

    @@id(name: "id", [userId, postId])
}

model ChatRoom {
    id    String @id @default(cuid())
    users User[]

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    messages   Message[]
}

model Message {
    id      Int    @id @default(autoincrement())
    payload String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    room       ChatRoom @relation(fields: [chatRoomId], references: [id])
    user       User     @relation(fields: [userId], references: [id])
    chatRoomId String
    userId     Int
}

model LiveStream {
    id         Int    @id @default(autoincrement())
    title      String
    stream_key String
    stream_id  String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user   User @relation(fields: [userId], references: [id])
    userId Int
}

model Cart {
    id         Int        @id @default(autoincrement())
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
    product    Product[]
    items      CartItem[]
}

// why cascade cart user 

model CartItem {
    id         Int      @id @default(autoincrement())
    quantity   Int      @default(1)
    product    Product  @relation(fields: [productId], references: [id])
    productId  Int
    cart       Cart     @relation(fields: [cartId], references: [id])
    cartId     Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}
